{
    "version": "https://jsonfeed.org/version/1",
    "title": "Sean Becker | Feed",
    "home_page_url": "https://seanbecker.me",
    "feed_url": "https://seanbecker.me/feed.json",
    "description": "Technology and Engineering Blog",
    "icon": "https://seanbecker.me/logo.png",
    "items": [
        {
            "id": "https://seanbecker.me/posts/about-me",
            "content_html": "\n- I grew up in Vernon Hills, IL\n- I went to Purdue University where I majored in Computer Science and minored in Business Management        \n- I try to take at least one ski trip every year, usually on the west coast of the US\n- I frequently listen to podcasts including Lex Fridman, Andrew Huberman, Joe Rogan, and Sam Harris\n- I enjoy building all things related to technology. Please reach out if you have an idea and want advice on how to build it :)\n        \nGo back [home](/).\n",
            "url": "https://seanbecker.me/posts/about-me",
            "title": "About Me",
            "summary": "Just a few snippets of information to get to know me.",
            "date_modified": "2023-12-03T06:00:00.000Z"
        },
        {
            "id": "https://seanbecker.me/posts/past-projects",
            "content_html": "\n<ProjectList filter={({ active }) => !active} />\n\nGo back [home](/).\n",
            "url": "https://seanbecker.me/posts/past-projects",
            "title": "Past Projects",
            "summary": "This is a list of some of the projects I've worked on in the past.",
            "date_modified": "2023-12-03T06:00:00.000Z"
        },
        {
            "id": "https://seanbecker.me/posts/professional-experience",
            "content_html": "\n## FuboTV - Senior Software Engineer, SmartTV (Present)\n- [Redesigned SmartTV application](https://cordcuttersnews.com/fubo-is-rolling-out-a-new-improved-user-interface-with-re-designed-apps/) and launched to 300,000+ users.\n- Built new sidebar found on LG, Samsung, Vizio, Hisense, and Xbox applications.\n- Integrated new backend with existing player controls (i.e., the UI that allows users to control playback).\n- Built tooling to improve developer efficiency.\n\n## Fubo Gaming - Software Engineer\n- Interviewed 70+ candidates for engineering roles. Scaled team from 5 to 15 engineers.\n- Created template for making new Node.js packages that get published to Github npm registry.\n- Rewrote authentication flow & integration between sportsbook and TV\n    product; Coordinated effort between white-label provider, in-house\n    designers, in-house frontend team, and in-house platform team.\n- Integrated [Trustly](https://us.trustly.com) payment provider, simplifying deposit flow and substantially increasing first time deposit rate.\n- Coordinated regulatory changes required to launch Fubo Sportsbook in Iowa, Arizona, and New Jersey.\n\n## Prior Employment\nFor information on prior employment, you can view my resume [here](/docs/resume.pdf).\n\nGo back [home](/).\n",
            "url": "https://seanbecker.me/posts/professional-experience",
            "title": "Professional Experience",
            "summary": "A brief summary of my professional experience.",
            "date_modified": "2023-12-03T06:00:00.000Z"
        },
        {
            "id": "https://seanbecker.me/posts/chatgpt-text-completion",
            "content_html": "\nJust looking for code? You can find that [here](https://gist.github.com/seanbecker15/49a20ef17e77682d7907f5eba8fd507b).\n\n## Introduction\n\nThere are lots of things that make ChatGPT great under the hood, but let's face it: most people will never truly understand the internals.\nThat doesn't mean that the entire stack has to be a mystery!\n\n### Why is this UX important?\n\nIf you've ever used the OpenAI API you'll know that it's quite slow to use the standard API without streaming. It can take 10+ seconds to a receive\na response depending on the complexity of the prompt. Although it is [probably a myth](https://www.reddit.com/r/webdev/comments/n66d0r/comment/gx5b2gl) that users will leave your website if it takes more than 3 seconds to load,\nit is still super important to have good _perceived performance_. For companies working on cutting edge innovation such as OpenAI it is even more important to prove that their tool is useful.\nWaiting for 10+ seconds leads to loss of context and a bad user experience.\n\nThough the total response time is likely the same, the streaming API sends back partial responses as they are generated.\nUsers can see the response in real time and process the response as it is being generated. This makes a huge difference in the user experience.\n\n\n### Assumptions\n\n- I'm using React for this example, but most of this code should be very easy to plug into other frameworks.\n- I'm assuming that you already have a backend endpoint that forwards the OpenAI stream to your frontend. If not, I will be making a guide on how to do that soon.\n\n### Prerequisites\n\n```bash\nnpm install eventsource-parser\n```\n\n## Let's get coding\n\n1. Scaffold our component. We'll need a prompt input, a submit button, and a location for our results.\n\n  ```javascript\n  import { useState, ChangeEvent } from \"react\";\n\n  // Assumes that you can already fetch a completion from OpenAI\n  import { fetchCompletion } from \"./api\";\n\n  const Chatbot = () => {\n    const [prompt, setPrompt] = useState(\"\");\n    const [completion, setCompletion] = useState(\"\");\n\n    const handleResponse = async (response: Response) => {};\n\n    const handleChange = (e: ChangeEvent<HTMLInputElement>) => {\n      setPrompt(e.target.value);\n    };\n\n    const handleSubmit = () => fetchCompletion(prompt)\n      .then(handleResponse)\n\n    return (\n      <div>\n        <div>\n          <input type=\"text\" value={prompt} onChange={handleChange} />\n          <button type=\"button\" onClick={handleSubmit}>Submit</button>\n        </div>\n        <p>{completion}</p>\n      </div>\n    );\n  }\n  ```\n\n2. Convert OpenAI stream to ReadableStream. OpenAI sends a stream of bytes. We need to convert that to a stream of strings.\n\n  ```javascript\n  ...\n\n  const Chatbot = () => {\n    ...\n\n    const handleResponse = async (response: Response) => {\n      const stream = response.body;\n      const textStream = stream.pipeThrough(new TextDecoderStream());\n    }\n\n    ...\n  }\n  ```\n\n\n3. Make ReadableStream async iterable. ReadableStream is not yet an async iterable in browsers, so we need to convert it to one.\nIf our target platform were NodeJS we wouldn't need this step as ReadableStream is already an async iterable in NodeJS.\n\n  ```javascript\n    ...\n\n    // Convert the stream to an async iterator.\n    // Found here https://jakearchibald.com/2017/async-iterators-and-generators/#making-streams-iterate\n    async function* streamAsyncIterator(stream: ReadableStream) {\n      const reader = stream.getReader();\n      try {\n        while (true) {\n          const { done, value } = await reader.read();\n          if (done) return;\n          yield value;\n        }\n      } finally {\n        reader.releaseLock();\n      }\n    }\n\n    ...\n\n    const Chatbot = () => {\n      ...\n\n      const handleResponse = async (response: Response) => {\n        const stream = response.body;\n        const textStream = stream.pipeThrough(new TextDecoderStream());\n        const asyncIteratorStream = streamAsyncIterator(textStream);\n        for await (const chunk of asyncIteratorStream) {\n          console.log(chunk);\n        }\n      }\n\n      ...\n    }\n  ```\n\n4. Previously we were logging each chunk to the console. Now we need to parse each chunk as an event. We'll use the `eventsource-parser` package to do this.\n\n  ```javascript\n  ...\n\n  import { createParser, ParsedEvent, ReconnectInterval } from \"eventsource-parser\";\n\n  ...\n\n  const Chatbot = () => {\n    ...\n\n    const parseEvent = (event: ParsedEvent | ReconnectInterval) => {\n      console.log(event);\n    };\n\n    const handleResponse = async (response: Response) => {\n      ...\n      const parser = createParser(parseEvent);\n      for await (const chunk of asyncIteratorStream) {\n        parser.feed(chunk);\n      }\n    }\n\n    ...\n  }\n  \n  ```\n\n5. Update completion text as we get each event. You should now see the completion text update as it is generated.\n\n  ```javascript\n  ...\n\n  const Chatbot = () => {\n    ...\n\n    const parseEvent = (event: ParsedEvent | ReconnectInterval) => {\n      if (event.type !== 'event' || event.data === '[DONE]') {\n        return\n      }\n\n      const delta = JSON.parse(event.data).choices[0]?.delta?.content || \"\";\n      setCompletion((prev) => {\n        if (prev) {\n          return prev + delta;\n        } else {\n          return delta;\n        }\n      });\n    };\n\n    ...\n  }\n  ```\n\n  ## Recap\n\n  That's it! You should now have a working chatbot that can complete sentences in real time. You can find the full code [here](https://gist.github.com/seanbecker15/49a20ef17e77682d7907f5eba8fd507b).",
            "url": "https://seanbecker.me/posts/chatgpt-text-completion",
            "title": "OpenAI Series: Chat-GPT Style Completion Using SSE Streaming API",
            "summary": "Use the OpenAI SSE streaming API to make a chatbot that can complete sentences just like ChatGPT.",
            "date_modified": "2023-12-04T06:00:00.000Z"
        }
    ]
}